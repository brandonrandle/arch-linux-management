#!/bin/bash
# This script runs several sub-commands for managing my Arch Linux environment.

###############################################################################
# USAGE
###############################################################################

# This script must be run from the root of the project: `./bin/bpman`

# stops script if sourced - script should be run as ./script or added to path,
# not sourced
[[ $_ != $0 ]] && return


###############################################################################
# ERROR HANDLING
###############################################################################

# Ensures failure when shell tries to expand unset variables and ensures
# failure on the first command in a pipeline that fails instead of waiting for
# the whole pipe
set -uo pipefail

# catches error messages
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR


###############################################################################
# VARIABLES
###############################################################################

# path to repository on AWS S3 bucket
REMOTE_PATH=s3://brandle-arch/repo/x86_64

# path to repositor on local machine
LOCAL_PATH=$HOME/.local/share/arch-repo

# name of repository
REPO_NAME=brandle


###############################################################################
# BUILD SETUP
###############################################################################

setup_build() {
    # gets relative paths for all packages
    PACKAGES=${@:-pkg/*}

    # sets chroot install path
    CHROOT="$PWD/root"

    # creates chroot install location
    mkdir -p "$CHROOT"

    # creates clean chroot environment if it doesn't exist
    [[ -d "$CHROOT/root" ]] || mkarchroot -C /etc/pacman.conf "$CHROOT/root" base base-devel
}


###############################################################################
# BUILD PACKAGES
###############################################################################

perform_build() {
    # iterates over every package path, removes old builds, and builds anew
    for package in $PACKAGES; do
      cd "$package"
      rm -f *.pkg.tar.xz
      makechrootpkg -cur $CHROOT
      cd -
    done
}


###############################################################################
# SYNC REMOTE DB TO LOCAL
###############################################################################

sync_remote_to_local() {
    # create local directory for repo
    mkdir -p "$LOCAL_PATH"

    # sync remote repo to local directory
    s3cmd sync "$REMOTE_PATH/$REPO_NAME".{db,files}.tar.xz "$LOCAL_PATH/"
    ln -sf "$REPO_NAME.db.tar.xz" "$LOCAL_PATH/$REPO_NAME.db"
    ln -sf "$REPO_NAME.files.tar.gz" "$LOCAL_PATH/$REPO_NAME.files"
}


###############################################################################
# ADD PACKAGES TO REPO
###############################################################################

add_packages_to_repo() {
    repo-add "$LOCAL_PATH/$REPO_NAME.db.tar.xz" ${PACKAGES[@]}/*.pkg.tar.xz
}

###############################################################################
# SYNC LOCAL DB TO REMOTE - AUR SYNC
###############################################################################

sync_local_to_remote-sync() {
    s3cmd sync --follow-symlinks --acl-public \
      "$LOCAL_PATH/"*.pkg.tar.xz \
      "$LOCAL_PATH/$REPO_NAME".{db,files}{,.tar.xz} \
      "$REMOTE_PATH/"
}

###############################################################################
# SYNC LOCAL DB TO REMOTE - AUR REMOVE
###############################################################################

sync_local_to_remote-remove() {
    s3cmd sync --follow-symlinks --acl-public \
      "$LOCAL_PATH/$REPO_NAME".{db,files}{,.tar.xz} \
      "$REMOTE_PATH/"
}


###############################################################################
# SYNC LOCAL DB TO REMOTE - BUILD
###############################################################################

sync_local_to_remote-build() {
    s3cmd sync --follow-symlinks --acl-public \
      ${PACKAGES[@]}/*.pkg.tar.xz \
      "$LOCAL_PATH/$REPO_NAME".{db,files}{,.tar.xz} \
      "$REMOTE_PATH/"
}


###############################################################################
# SYNC CLEANUP
###############################################################################

sync_cleanup() {
    # clean up older packages that may have been deleted from remote so they
    # don't get re-uploaded
    rm -f "$LOCAL_PATH/"*.pkg.tar.xz
}


###############################################################################
# AUR SYNC
###############################################################################

aur_sync() {
    # can be used to add new packages or to update packages
    aur sync -d "$REPO_NAME" --root="$LOCAL_PATH" "$@" || true
}


###############################################################################
# REMOVE AUR PACKAGE(S) FROM REPO
###############################################################################

repo_remove() {
    repo-remove "$LOCAL_PATH/$REPO_NAME.db.tar.xz" "$@"
}


###############################################################################
# REMOVE AUR PACKAGE(S) FROM REMOTE REPO
###############################################################################

remote_remove_packages() {
    for package in "$@"; do
      s3cmd rm "$REMOTE_PATH/$package-*.pkg.tar.xz"
    done
}


###############################################################################
# SUBCOMMANDS
###############################################################################

bpman__build() {
    setup_build
    perform_build
    sync_remote_to_local
    add_packages_to_repo
    sync_local_to_remote-build
}

bpman__sync() {
    sync_remote_to_local
    sync_cleanup
    aur_sync "$@"
    sync_local_to_remote-sync
}

bpman__delete() {
    sync_remote_to_local
    repo_remove "$@"
    sync_local_to_remote-remove
    remote_remove_packages "$@"
}

bpman__help() {
    echo "Help text."
}


###############################################################################
# MAIN
###############################################################################

# ensures that the subcommand given is a valid function
if [ $# -eq 0 ]; then
    bpman__help
elif declare -f "bpman__$1" >/dev/null; then
    func="bpman__$1"; shift
    "$func" "$@"
else # if subcommand not a valid function, prints help
    bpman__help
fi
